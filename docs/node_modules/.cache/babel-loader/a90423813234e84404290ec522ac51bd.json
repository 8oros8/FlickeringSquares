{"ast":null,"code":"var _jsxFileName = \"/Users/andreysmirnov/Documents/\\u0424\\u0440\\u043E\\u043D\\u0442/flickeringSquares/flickeringsquares/src/index.js\";\n// noinspection JSPotentiallyInvalidUsageOfClassThis\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet gameOptions = {\n  numberRows: 3,\n  numberColumns: 3,\n  complexity: 2\n};\nlet timeoutStorage = [];\n\nclass Square extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.activateButton = function (e) {\n      if (this.props.flickeringMemory.length > 0) {\n        if (parseInt(this.props.flickeringMemory[0].id[0]) === this.props.coords[0] && parseInt(this.props.flickeringMemory[0].id[2]) === this.props.coords[1]) {\n          e.target.style.backgroundColor = 'white';\n          this.props.flickeringMemory.shift();\n\n          if (this.props.flickeringMemory.length === 0) {\n            this.props.updateLevelStatus(true);\n          }\n\n          setTimeout(function () {\n            e.target.style.backgroundColor = '#799E00';\n          }, 500);\n        } else {\n          e.target.style.backgroundColor = 'red';\n          let updateMistakeStatus = this.props.updateMistakeStatus.bind(this);\n          setTimeout(function () {\n            e.target.style.backgroundColor = '#799E00';\n          }, 500);\n          setTimeout(function () {\n            updateMistakeStatus(true);\n          }, 2000);\n        }\n      }\n    };\n\n    this.activateButton = this.activateButton.bind(this);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"square\",\n      id: this.props.coords[0] + \":\" + this.props.coords[1],\n      onClick: this.activateButton,\n      children: this.props.value\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Row extends React.Component {\n  constructor() {\n    super(...arguments);\n\n    this.renderSquares = function (counter, rowNumber) {\n      let renderArray = [];\n\n      for (let i = 0; i < counter; i++) {\n        renderArray.push( /*#__PURE__*/_jsxDEV(Square, {\n          coords: [rowNumber, i],\n          flickeringMemory: this.props.flickeringMemory,\n          levelPassed: this.props.levelPassed,\n          updateLevelStatus: this.props.updateLevelStatus,\n          updateMistakeStatus: this.props.updateMistakeStatus\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 30\n        }, this));\n      }\n\n      return renderArray;\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: this.renderSquares(gameOptions.numberColumns, this.props.rowNumber)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Board extends React.Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      flickeringMemory: [],\n      levelPassed: false,\n      levelNumber: 0,\n      mistakeMade: false\n    };\n\n    this.updateLevelStatus = value => {\n      this.setState({\n        levelPassed: value\n      });\n    };\n\n    this.incrementLevelNumber = value => {\n      let newLevelNumber = this.state.levelNumber + value;\n      this.setState({\n        levelNumber: newLevelNumber\n      });\n    };\n\n    this.updateMistakeStatus = value => {\n      this.setState({\n        mistakeMade: value\n      });\n    };\n\n    this.startClickHandler = function () {\n      // noinspection JSPotentiallyInvalidUsageOfClassThis\n      if (this.state.levelPassed === true || this.state.mistakeMade === true || this.state.levelNumber === 0) {\n        // noinspection JSPotentiallyInvalidUsageOfClassThis\n        this.setState({\n          levelPassed: false,\n          flickeringMemory: this.startFlickering()\n        });\n      }\n    };\n\n    this.startClickHandler = this.startClickHandler.bind(this);\n\n    this.resetClickHandler = function () {\n      for (let timeoutId of timeoutStorage) {\n        clearTimeout(timeoutId);\n      }\n\n      this.setState({\n        flickeringMemory: [],\n        levelPassed: false,\n        levelNumber: 0,\n        mistakeMade: false\n      });\n    };\n\n    this.resetClickHandler = this.resetClickHandler.bind(this);\n\n    this.renderRows = function (counter) {\n      let renderArray = [];\n\n      for (let i = 0; i < counter; i++) {\n        renderArray.push( /*#__PURE__*/_jsxDEV(Row, {\n          rowNumber: i,\n          flickeringMemory: this.state.flickeringMemory,\n          levelPassed: this.state.levelPassed,\n          updateLevelStatus: this.updateLevelStatus,\n          updateMistakeStatus: this.updateMistakeStatus\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 30\n        }, this));\n      }\n\n      return renderArray;\n    };\n\n    this.randomFlicker = function (root) {\n      let elementsArray = Array.from(root.querySelectorAll('.square'));\n      let randomNumbers = [];\n      let randomFlickeringArray = [];\n      let min = 0;\n      let max = gameOptions.numberColumns * gameOptions.numberRows - 1;\n\n      for (let i = 0; i < gameOptions.complexity; i++) {\n        let randomIndex = Math.floor(Math.random() * (max - min + 1)) + min;\n        randomNumbers.push(randomIndex);\n      }\n\n      for (let index of randomNumbers) {\n        randomFlickeringArray.push(elementsArray[index]);\n      }\n\n      return randomFlickeringArray;\n    };\n\n    this.startFlickering = function () {\n      let flickeringArray = this.randomFlicker(document.getElementById('root'));\n\n      for (let i = 0; i < flickeringArray.length; i++) {\n        let timeout = i === 0 ? 0 : i * 1500;\n        let firstTimeoutId = setTimeout(function () {\n          flickeringArray[i].style.background = 'white';\n          let secondTimeoutId = setTimeout(function () {\n            flickeringArray[i].style.background = '#799E00';\n          }, 900);\n        }, timeout);\n        timeoutStorage.push(firstTimeoutId);\n        timeoutStorage.push(secondTimeoutId);\n      }\n\n      return flickeringArray;\n    };\n\n    this.startFlickering = this.startFlickering.bind(this);\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    if (prevState.mistakeMade === false && this.state.mistakeMade === true) {\n      this.updateMistakeStatus(false);\n      this.startClickHandler();\n    }\n\n    if (prevState.levelPassed === false && this.state.levelPassed === true) {\n      let startClickHandler = this.startClickHandler.bind(this);\n      this.incrementLevelNumber(1);\n      setTimeout(function () {\n        startClickHandler();\n      }, 2000);\n    }\n\n    gameOptions.complexity = 2 + Math.ceil(this.state.levelNumber / 2);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [this.renderRows(gameOptions.numberRows), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'buttonsWrapper',\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: 'mainButton',\n          onClick: this.startClickHandler,\n          children: \"Start\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: 'mainButton',\n          onClick: this.resetClickHandler,\n          children: \"Reset\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: 'levelInfo',\n        children: [\"Level: \", this.state.levelNumber]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Game extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-board\",\n        children: /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 213,\n  columnNumber: 5\n}, this), document.getElementById('root'));","map":{"version":3,"sources":["/Users/andreysmirnov/Documents/Фронт/flickeringSquares/flickeringsquares/src/index.js"],"names":["React","ReactDOM","gameOptions","numberRows","numberColumns","complexity","timeoutStorage","Square","Component","activateButton","e","props","flickeringMemory","length","parseInt","id","coords","target","style","backgroundColor","shift","updateLevelStatus","setTimeout","updateMistakeStatus","bind","render","value","Row","renderSquares","counter","rowNumber","renderArray","i","push","levelPassed","Board","state","levelNumber","mistakeMade","setState","incrementLevelNumber","newLevelNumber","startClickHandler","startFlickering","resetClickHandler","timeoutId","clearTimeout","renderRows","randomFlicker","root","elementsArray","Array","from","querySelectorAll","randomNumbers","randomFlickeringArray","min","max","randomIndex","Math","floor","random","index","flickeringArray","document","getElementById","timeout","firstTimeoutId","background","secondTimeoutId","componentDidUpdate","prevProps","prevState","snapshot","ceil","Game"],"mappings":"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","sourcesContent":["\n// noinspection JSPotentiallyInvalidUsageOfClassThis\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nlet gameOptions = {\n    numberRows: 3,\n    numberColumns: 3,\n    complexity: 2,\n}\nlet timeoutStorage = []\n\nclass Square extends React.Component {\n    activateButton = function (e) {\n        if (this.props.flickeringMemory.length > 0) {\n            if ((parseInt(this.props.flickeringMemory[0].id[0]) === this.props.coords[0]) && (parseInt(this.props.flickeringMemory[0].id[2]) === this.props.coords[1])) {\n                e.target.style.backgroundColor = 'white'\n                this.props.flickeringMemory.shift()\n                if (this.props.flickeringMemory.length === 0) {\n                    this.props.updateLevelStatus(true)\n                }\n                setTimeout(function () {\n                    e.target.style.backgroundColor = '#799E00'\n                }, 500)\n            }\n            else {\n                e.target.style.backgroundColor = 'red'\n                let updateMistakeStatus = this.props.updateMistakeStatus.bind(this)\n                setTimeout(function () {\n                    e.target.style.backgroundColor = '#799E00'\n                }, 500)\n                setTimeout(function () {\n                    updateMistakeStatus(true)\n                }, 2000)\n            }\n        }\n    }\n    activateButton = this.activateButton.bind(this)\n    render() {\n        return (\n            <button className=\"square\" id={this.props.coords[0] + \":\" + this.props.coords[1]} onClick={this.activateButton}>\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\nclass Row extends React.Component {\n    renderSquares = function (counter, rowNumber) {\n        let renderArray = []\n        for (let i = 0; i < counter; i++) {\n            renderArray.push(<Square key = {i}\n                                     coords = {[rowNumber, i]}\n                                     flickeringMemory = {this.props.flickeringMemory}\n                                     levelPassed = {this.props.levelPassed}\n                                     updateLevelStatus = {this.props.updateLevelStatus}\n                                     updateMistakeStatus = {this.props.updateMistakeStatus}\n            />)\n        }\n        return renderArray\n    }\n    render() {\n        return (\n            <div className=\"board-row\">\n                {this.renderSquares(gameOptions.numberColumns, this.props.rowNumber)}\n            </div>\n        )\n    }\n}\n\nclass Board extends React.Component {\n    state = {\n        flickeringMemory: [],\n        levelPassed: false,\n        levelNumber: 0,\n        mistakeMade: false,\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if ((prevState.mistakeMade === false) && (this.state.mistakeMade === true)) {\n            this.updateMistakeStatus(false)\n            this.startClickHandler()\n        }\n        if ((prevState.levelPassed === false) && (this.state.levelPassed === true)) {\n            let startClickHandler = this.startClickHandler.bind(this)\n            this.incrementLevelNumber(1)\n            setTimeout(function () {\n                startClickHandler()\n            }, 2000)\n        }\n        gameOptions.complexity = 2 + (Math.ceil(this.state.levelNumber/2))\n    }\n\n    updateLevelStatus = (value) => {\n        this.setState({\n            levelPassed: value\n        })\n    }\n    incrementLevelNumber = (value) => {\n        let newLevelNumber = this.state.levelNumber + value\n        this.setState({\n            levelNumber: newLevelNumber\n        })\n    }\n    updateMistakeStatus = (value) => {\n        this.setState({\n            mistakeMade: value\n        })\n    }\n    startClickHandler = function () {\n        // noinspection JSPotentiallyInvalidUsageOfClassThis\n        if ((this.state.levelPassed === true) || (this.state.mistakeMade === true) || (this.state.levelNumber === 0)){\n            // noinspection JSPotentiallyInvalidUsageOfClassThis\n            this.setState({\n                levelPassed: false,\n                flickeringMemory: this.startFlickering(),\n            })\n        }\n    }\n    startClickHandler = this.startClickHandler.bind(this)\n    resetClickHandler = function () {\n        for (let timeoutId of timeoutStorage) {\n            clearTimeout(timeoutId)\n        }\n        this.setState({\n            flickeringMemory: [],\n            levelPassed: false,\n            levelNumber: 0,\n            mistakeMade: false,\n        })\n    }\n    resetClickHandler = this.resetClickHandler.bind(this)\n    renderRows = function (counter) {\n        let renderArray = []\n        for (let i = 0; i < counter; i++) {\n            renderArray.push(<Row\n                key={i}\n                rowNumber = {i}\n                flickeringMemory = {this.state.flickeringMemory}\n                levelPassed = {this.state.levelPassed}\n                updateLevelStatus = {this.updateLevelStatus}\n                updateMistakeStatus = {this.updateMistakeStatus}\n            />)\n        }\n        return renderArray\n    }\n    randomFlicker = function (root) {\n        let elementsArray = Array.from(root.querySelectorAll('.square'))\n        let randomNumbers = []\n        let randomFlickeringArray = []\n        let min = 0\n        let max = gameOptions.numberColumns*gameOptions.numberRows - 1\n        for (let i = 0; i < gameOptions.complexity; i++) {\n            let randomIndex = Math.floor(Math.random() * (max - min + 1)) + min\n            randomNumbers.push(randomIndex)\n        }\n        for (let index of randomNumbers) {\n            randomFlickeringArray.push(elementsArray[index])\n        }\n        return randomFlickeringArray\n    }\n\n    startFlickering = function () {\n        let flickeringArray = this.randomFlicker(document.getElementById('root'))\n        for (let i = 0; i < flickeringArray.length; i++) {\n            let timeout = i === 0? 0 : i * 1500\n            let firstTimeoutId = setTimeout(function () {\n                flickeringArray[i].style.background = 'white'\n                let secondTimeoutId = setTimeout(function () {\n                    flickeringArray[i].style.background = '#799E00'\n                }, 900)\n            }, timeout)\n            timeoutStorage.push(firstTimeoutId)\n            timeoutStorage.push(secondTimeoutId)\n        }\n        return flickeringArray\n    }\n    startFlickering = this.startFlickering.bind(this)\n    render() {\n        return (\n            <div>\n                {this.renderRows(gameOptions.numberRows)}\n                <div className={'buttonsWrapper'}>\n                    <button className={'mainButton'} onClick={this.startClickHandler}>\n                        Start\n                    </button>\n                    <button className={'mainButton'} onClick={this.resetClickHandler}>\n                        Reset\n                    </button>\n                </div>\n                <div className={'levelInfo'}>\n                    Level: {this.state.levelNumber}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n\n"]},"metadata":{},"sourceType":"module"}