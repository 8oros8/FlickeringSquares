[{"/Users/andreysmirnov/Documents/Фронт/flickeringSquares/flickeringsquares/docs/src/index.js":"1"},{"size":8509,"mtime":1644488407508,"results":"2","hashOfConfig":"3"},{"filePath":"4","messages":"5","suppressedMessages":"6","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"7"},"fy7gss","/Users/andreysmirnov/Documents/Фронт/flickeringSquares/flickeringsquares/docs/src/index.js",["8","9","10","11","12"],[],"\n// noinspection JSPotentiallyInvalidUsageOfClassThis\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nlet timeoutStorage = []\n\nclass Square extends React.Component {\n    activateButton = function (e) {\n        if (this.props.flickeringMemory.length > 0) {\n            if ((parseInt(this.props.flickeringMemory[0].id[0]) === this.props.coords[0]) && (parseInt(this.props.flickeringMemory[0].id[2]) === this.props.coords[1])) {\n                e.target.style.backgroundColor = 'white'\n                this.props.flickeringMemory.shift()\n                if (this.props.flickeringMemory.length === 0) {\n                    this.props.updateLevelStatus(true)\n                }\n                setTimeout(function () {\n                    e.target.style.backgroundColor = '#799E00'\n                }, 500)\n            }\n            else {\n                e.target.style.backgroundColor = 'red'\n                for (let timeoutId of timeoutStorage) {\n                    clearTimeout(timeoutId)\n                }\n                for (let square of document.querySelectorAll('.square')) {\n                    setTimeout(function () {\n                        square.style.background = '#799E00'\n                    }, 500)\n                }\n                let updateMistakeStatus = this.props.updateMistakeStatus.bind(this)\n                setTimeout(function () {\n                    e.target.style.backgroundColor = '#799E00'\n                }, 500)\n                setTimeout(function () {\n                    updateMistakeStatus(true)\n                }, 2000)\n            }\n        }\n    }\n    activateButton = this.activateButton.bind(this)\n    render() {\n        return (\n            <button className=\"square\" id={this.props.coords[0] + \":\" + this.props.coords[1]} onClick={this.activateButton}>\n                {this.props.value}\n            </button>\n        );\n    }\n}\n\nclass Row extends React.Component {\n    renderSquares = function (counter, rowNumber) {\n        let renderArray = []\n        for (let i = 0; i < counter; i++) {\n            renderArray.push(<Square key = {i}\n                                     coords = {[rowNumber, i]}\n                                     flickeringMemory = {this.props.flickeringMemory}\n                                     levelPassed = {this.props.levelPassed}\n                                     updateLevelStatus = {this.props.updateLevelStatus}\n                                     updateMistakeStatus = {this.props.updateMistakeStatus}\n            />)\n        }\n        return renderArray\n    }\n    render() {\n        return (\n            <div className=\"board-row\">\n                {this.renderSquares(this.props.numberColumns, this.props.rowNumber)}\n            </div>\n        )\n    }\n}\n\nclass Board extends React.Component {\n    state = {\n        flickeringMemory: [],\n        levelPassed: false,\n        levelNumber: 0,\n        mistakeMade: false,\n        squaresArray: [],\n        numberRows: 3,\n        numberColumns: 3,\n        complexity: 2,\n    }\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        if ((prevState.mistakeMade === false) && (this.state.mistakeMade === true)) {\n            this.updateMistakeStatus(false)\n            this.startClickHandler()\n        }\n        if ((prevState.levelPassed === false) && (this.state.levelPassed === true)) {\n            this.incrementLevelNumber(1)\n        }\n    }\n\n    updateLevelStatus = (value) => {\n        this.setState({\n            levelPassed: value\n        })\n    }\n    incrementLevelNumber = (value) => {\n        let newLevelNumber = this.state.levelNumber + value\n        this.setState({\n            levelNumber: newLevelNumber,\n            complexity: 2 + (Math.ceil(newLevelNumber/2)),\n            numberColumns: 3 + (Math.floor(newLevelNumber/5)),\n            numberRows: 3 + (Math.floor(newLevelNumber/5)),\n        })\n        let startClickHandler = this.startClickHandler.bind(this)\n        let updateSquaresArray = this.updateSquaresArray.bind(this)\n        setTimeout(function () {\n            updateSquaresArray()\n            startClickHandler()\n        }, 2000)\n    }\n    updateMistakeStatus = (value) => {\n        this.setState({\n            mistakeMade: value\n        })\n    }\n    updateSquaresArray = () => {\n        this.setState({\n            squaresArray: Array.from(document.getElementById('root').querySelectorAll('.square'))\n        })\n    }\n    startClickHandler = function () {\n        // noinspection JSPotentiallyInvalidUsageOfClassThis\n        if ((this.state.levelPassed === true) || (this.state.mistakeMade === true) || (this.state.levelNumber === 0)){\n            // noinspection JSPotentiallyInvalidUsageOfClassThis\n            this.setState({\n                levelPassed: false,\n                flickeringMemory: this.startFlickering(),\n            })\n        }\n    }\n    startClickHandler = this.startClickHandler.bind(this)\n    resetClickHandler = function () {\n        for (let timeoutId of timeoutStorage) {\n            clearTimeout(timeoutId)\n        }\n        for (let square of document.querySelectorAll('.square')) {\n            square.style.background = '#799E00'\n        }\n        this.setState({\n            flickeringMemory: [],\n            levelPassed: false,\n            levelNumber: 0,\n            mistakeMade: false,\n            complexity: 2,\n            numberColumns: 3,\n            numberRows: 3,\n        })\n    }\n    resetClickHandler = this.resetClickHandler.bind(this)\n    renderRows = function (counter) {\n        let renderArray = []\n        for (let i = 0; i < counter; i++) {\n            renderArray.push(<Row\n                key={i}\n                rowNumber = {i}\n                flickeringMemory = {this.state.flickeringMemory}\n                levelPassed = {this.state.levelPassed}\n                updateLevelStatus = {this.updateLevelStatus}\n                updateMistakeStatus = {this.updateMistakeStatus}\n                numberRows = {this.state.numberRows}\n                numberColumns = {this.state.numberColumns}\n            />)\n        }\n        return renderArray\n    }\n    randomFlicker = function (squaresArray) {\n        let elementsArray = squaresArray.length === 0 ? Array.from(document.getElementById('root').querySelectorAll('.square')) : squaresArray\n        let randomNumbers = []\n        let randomFlickeringArray = []\n        let min = 0\n        let max = this.state.numberColumns*this.state.numberRows - 1\n        for (let i = 0; i < this.state.complexity; i++) {\n            let randomIndex = Math.floor(Math.random() * (max - min + 1)) + min\n            randomNumbers.push(randomIndex)\n        }\n        for (let index of randomNumbers) {\n            randomFlickeringArray.push(elementsArray[index])\n        }\n        return randomFlickeringArray\n    }\n    randomFlicker = this.randomFlicker.bind(this)\n\n    startFlickering = function () {\n        let flickeringArray = this.randomFlicker(this.state.squaresArray)\n        for (let i = 0; i < flickeringArray.length; i++) {\n            let timeout = i === 0? 0 : i * 1500\n            let firstTimeoutId = setTimeout(function () {\n                flickeringArray[i].style.background = 'white'\n            }, timeout)\n            timeoutStorage.push(firstTimeoutId)\n            let secondTimeoutId = setTimeout(function () {\n                flickeringArray[i].style.background = '#799E00'\n            }, timeout+900)\n            timeoutStorage.push(secondTimeoutId)\n        }\n        return flickeringArray\n    }\n    startFlickering = this.startFlickering.bind(this)\n    render() {\n        return (\n            <div>\n                {this.renderRows(this.state.numberRows)}\n                <div className={'buttonsWrapper'}>\n                    <button className={'mainButton'} onClick={this.startClickHandler}>\n                        Start\n                    </button>\n                    <button className={'mainButton'} onClick={this.resetClickHandler}>\n                        Reset\n                    </button>\n                </div>\n                <div className={'levelInfo'}>\n                    Level: {this.state.levelNumber}\n                </div>\n            </div>\n        );\n    }\n}\n\nclass Game extends React.Component {\n    render() {\n        return (\n            <div className=\"game\">\n                <div className=\"game-board\">\n                    <Board />\n                </div>\n            </div>\n        );\n    }\n}\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n\n",{"ruleId":"13","severity":1,"message":"14","line":43,"column":5,"nodeType":"15","messageId":"16","endLine":43,"endColumn":52},{"ruleId":"13","severity":1,"message":"17","line":137,"column":5,"nodeType":"15","messageId":"16","endLine":137,"endColumn":58},{"ruleId":"13","severity":1,"message":"18","line":155,"column":5,"nodeType":"15","messageId":"16","endLine":155,"endColumn":58},{"ruleId":"13","severity":1,"message":"19","line":187,"column":5,"nodeType":"15","messageId":"16","endLine":187,"endColumn":50},{"ruleId":"13","severity":1,"message":"20","line":204,"column":5,"nodeType":"15","messageId":"16","endLine":204,"endColumn":54},"no-dupe-class-members","Duplicate name 'activateButton'.","PropertyDefinition","unexpected","Duplicate name 'startClickHandler'.","Duplicate name 'resetClickHandler'.","Duplicate name 'randomFlicker'.","Duplicate name 'startFlickering'."]